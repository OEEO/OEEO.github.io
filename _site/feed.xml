<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dean</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Aug 2017 15:03:37 +0800</pubDate>
    <lastBuildDate>Mon, 28 Aug 2017 15:03:37 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>学习笔记</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    当使用sort()来排列字母时，里面不需要加函数。例如’bcdefghkabb’.split(‘’).sort();//abbbcdefghk
  &lt;/li&gt;
  &lt;li&gt;
    new Set()去重[…(new Set(‘kfeebabcdeabc’))].sort().join(‘’);//abcdefk
  &lt;/li&gt;
  &lt;li&gt;
    substring(start,end)。slice(start,end)。substr(start,length);都是包括start，不包括end。前两者区别在于，slice()的end可以用负数表示从后往前数。
  &lt;/li&gt;
  &lt;li&gt;
    toString(2)可以将数字转换成二进制，其它进制类似。
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;操作数组，字符串，对象的方法总结。例如：遍历，根据条件排序，截取，分离…….&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    return、break、continue；假如有两层循环，这三个字符串用在里面的循环中：

    return 会中止所有循环

    break会中止里一层的循环，从上一层循环继续

    continue会中止此次循环中里一层的循环的后面代码的执行，从这一层循环继续
  &lt;/li&gt;
  &lt;li&gt;
    数组和字符串都可以用indexOf()方法，来检索。
  &lt;/li&gt;
  &lt;li&gt;
    字符与ASCII值的转换

    ‘str’.charCodeAt();    //字符转ASCII值 ，例如’a’.charCodeAt()   //97

    var str = String.fromCharCode(num)，例如 String.fromCharCode( 97 ) //a
  &lt;/li&gt;
  &lt;li&gt;
    正则表达式中添加变量的方法，用构造函数的方式创建正则表达式

    例如创建一个变量 i 重复三次的正则表达式

    var str = new RegExp( i + ‘{3}’ );
  &lt;/li&gt;
  &lt;li&gt;
    下面列出的值被当做假：false 、null 、undefined 、空字符串’’ 、数字0 、数字NaN。

    其他所有的值都被当做真，包括true、字符串“false“，以及所有对象。

    &amp;amp;&amp;amp;，如果第一个运算数的值为假，那么产生第1个运算数的值，否则产生第2个运算数的值。

    逻辑或，如果第一个运算数的值为真，那么产生第1个运算数的值，否则产生第2个运算数的值
  &lt;/li&gt;
  &lt;li&gt;
    在JS中，对象的比较，是引用的比较，就算属性名与值都完全一样，也可能是不等的。

    例如：

    ​	    console.log({a:1} === {a:1});//&lt;strong&gt;false&lt;/strong&gt;

    ​	    var a = {num:1};    var b = {num:1};  console.log(a === b);//&lt;strong&gt;false&lt;/strong&gt;
  &lt;/li&gt;
  &lt;li&gt;
    对象是通过引用来传递的。它们永远不会被复制

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//a、b、c每个都引用一个不同的空对象&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//a、b、c都引用同一个空对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    用正则表达式判断内容里是否含有什么

    例如一道题：匹配输入的内容password必须是，只能包含数字和字母，长度至少8位，而且必须至少有1个数字，1个小写字母，1个大写字母。

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,}&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//三个正向前瞻条件并列，确保至少有1个数字，1个小写字母，1个大写字母&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    当数字超过一定长度时，js就会把它转成科学记数法。此时，如果想保留完整的字符，就要转成字符串。
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 27 Aug 2017 06:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/08/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/27/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>数组</category>
        
        <category>字符串</category>
        
        <category>正则表达式</category>
        
        
        <category>DayNotes</category>
        
      </item>
    
      <item>
        <title>百度前端学院做题总结</title>
        <description>&lt;h2 id=&quot;综合需求&quot;&gt;综合需求&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;select下拉菜单的模拟&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;处理数组，处理字符串的常用方法和场景总结&lt;/li&gt;
  &lt;li&gt;判断中文的正则表达式： [\u4e00-\u9fa5]&lt;/li&gt;
  &lt;li&gt;正测表达式使用又忘记&lt;/li&gt;
  &lt;li&gt;用addEventListener()方法来批量添加事件，以及添加多事件&lt;/li&gt;
  &lt;li&gt;var a = {}; 可以用JSON.stringify(a) === ‘{}’ 来判断对象是否为空&lt;/li&gt;
  &lt;li&gt;让物体沿曲线轨迹运动&lt;/li&gt;
  &lt;li&gt;clearInterval()，clearTimeout()，的时候并不会终结此次运行，如果要结束，记得再加return&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css3&quot;&gt;CSS3&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;transition过渡动画&lt;/li&gt;
  &lt;li&gt;nth-child(odd)奇，nth-child(even)偶，nth-child(n)   p:nth-child(2)，选择(属于其父元素的第2个子元素且为p元素)，p:nth-of-type(2)，选择(属于其父元素的第2个p元素，不会计算其它元素)&lt;/li&gt;
  &lt;li&gt;animation 与@keyframes函数结合使用&lt;/li&gt;
  &lt;li&gt;@media screen   window.onresize&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    inline-block元素是基于基线对齐的，这一点类似于inline元素，可以用vertical-align设置对齐方式。

    float元素则是基于顶部对齐的。

    在子元素都设置了inline-block时，记得设置一下vertical-align，以避免不可预测的错误
  &lt;/li&gt;
  &lt;li&gt;
    当元素素设置了width及height具体值时，子元素可以超出父元素的范围，不会挣开父元素。如果父元素没设置，则父元素随子元素增大而增大(浮动的子元素要清除浮动)
  &lt;/li&gt;
  &lt;li&gt;
    当元素设置  display=”inline-block”，与后面的标签之间如果有空格，空行，会产生空白文本节点#text，width=5px，height=21px ，经常会因为这一点而产生一些被忽略的问题

    &lt;strong&gt;消除空白节点的方法如下&lt;/strong&gt;

    &lt;ul&gt;
      &lt;li&gt;去除元素间的空格&lt;/li&gt;
      &lt;li&gt;你可以用负边距来补齐空白。但你需要调整font-size，因为空白的宽度与这个属性有关系。大约为0.25em&lt;/li&gt;
      &lt;li&gt;给父元素设置font-size:0; 不过这样就要重新给子元素设置font-size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    用px做单位时候，缩放网页会出现错位问题。
  &lt;/li&gt;
  &lt;li&gt;
    清除浮动.clearfloat:after{display:block;clear:both;content:”“;visibility:hidden;height:0}    //就是用:after伪类创建一个元素，内容为空，高度为0，不可见，块区，清除左右浮动
​      .clearfloat{zoom:1}//兼容ie6
  &lt;/li&gt;
  &lt;li&gt;
    居中问题。

    block元素就用，设置width，margin:0 auto，

    inline，inline-block元素，就在父元素加text-align
  &lt;/li&gt;
  &lt;li&gt;
    妙用checked加~，模拟select下拉菜单效果
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;正则表达式&quot;&gt;正则表达式&lt;/h2&gt;

含义：reg exp 使用单个字符串来描述、匹配一系列符合某个句法规则的字符串

&lt;h4 id=&quot;--&quot;&gt;/  /&lt;/h4&gt;

&lt;h4 id=&quot;d-d-s-s-w-w-b-b-n--r&quot;&gt;\d	\D	\s	\S	\w	\W	\b	\B	\n	.	\r&lt;/h4&gt;

&lt;h4 id=&quot;nm-n-n--------------&quot;&gt;{n,m}	{n}	{n,}		( )	[ ]	-	^	$	[^]	+	*	?	|&lt;/h4&gt;

&lt;h4 id=&quot;g-i-m&quot;&gt;g	i	m&lt;/h4&gt;

&lt;h4 id=&quot;d37--d--d37-good3-good3&quot;&gt;\d{3,7}?		\d+?		\d{3,7}	good{3}	(good){3}&lt;/h4&gt;

&lt;h4 id=&quot;前瞻&quot;&gt;前瞻&lt;/h4&gt;

&lt;h4 id=&quot;正向前瞻expassert&quot;&gt;正向前瞻：exp(?=assert)&lt;/h4&gt;

&lt;h4 id=&quot;负向前瞻expassert&quot;&gt;负向前瞻：exp(?!assert)&lt;/h4&gt;

&lt;h4 id=&quot;正则表达式常用方法test--exec&quot;&gt;正则表达式常用方法：test()		exec()&lt;/h4&gt;

&lt;h4 id=&quot;字符串常用方法search-match-split-replaceregstr&quot;&gt;字符串常用方法：search()	match()	split()	replace(reg,str)&lt;/h4&gt;

&lt;h4 id=&quot;replaceregfunctionreturn-someting&quot;&gt;replace(reg,function(){return someting})&lt;/h4&gt;

</description>
        <pubDate>Wed, 16 Aug 2017 06:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/08/16/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%AD%A6%E9%99%A2%E5%81%9A%E9%A2%98%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/16/%E7%99%BE%E5%BA%A6%E5%89%8D%E7%AB%AF%E5%AD%A6%E9%99%A2%E5%81%9A%E9%A2%98%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
        
        <category>百度前端</category>
        
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>前端如何写一个精确的倒计时</title>
        <description>
关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法。

&lt;img src=&quot;https://img.alicdn.com/tfs/TB18QnlOpXXXXcVXpXXXXXXXXXX-388-256.png&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/25/how-to-write-a-count-down/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/25/how-to-write-a-count-down/</guid>
        
        <category>countdown</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>使用 JavaScript 创建并下载文件</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#先上代码&quot; id=&quot;markdown-toc-先上代码&quot;&gt;先上代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

本文将介绍如何使用 JavaScript 创建文件，并自动/手动将文件下载。这在导出原始数据时会比较方便。

&lt;h2 id=&quot;先上代码&quot;&gt;先上代码&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 创建并下载文件
 * @param  {String} fileName 文件名
 * @param  {String} content  文件内容
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAndDownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

很简单对吧，直接调用这个方法，传入文件名和文件内容，程序新建 a 标签，新建 Blob 对象，将文件名赋给 a 标签，同时将 Blob 对象作为 Url 也赋给 a 标签，模拟点击事件，自动下载成功，最后再回收内存。下面我们来看看具体是怎么操作的。

</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/22/js-create-file-and-download/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/22/js-create-file-and-download/</guid>
        
        <category>文件</category>
        
        <category>下载</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Fisher–Yates shuffle 洗牌算法</title>
        <description>
简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。

本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。

&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/10/16/shuffle-algorithm/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/16/shuffle-algorithm/</guid>
        
        <category>算法</category>
        
        <category>shuffle</category>
        
        <category>乱序</category>
        
        <category>洗牌</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Git 如何 clone 非 master 分支的代码</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#问题描述&quot; id=&quot;markdown-toc-问题描述&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

我们每次使用命令

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@gitlab.xxx.com:xxxxx.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在&lt;code class=&quot;highlighter-rouge&quot;&gt;daily/1.4.1&lt;/code&gt;分支上，我们希望拿到这个分支上的代码。

</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/07/07/git-clone-not-master-branch/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/07/git-clone-not-master-branch/</guid>
        
        <category>Git</category>
        
        <category>GitHub</category>
        
        <category>分支</category>
        
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>如何使用 babel</title>
        <description>
&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。

</description>
        <pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/14/how-to-use-babel/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/14/how-to-use-babel/</guid>
        
        <category>ES2015</category>
        
        <category>ES6</category>
        
        <category>ES5</category>
        
        <category>babel</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。

</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/10/JavaScript-good-parts-note3/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/10/JavaScript-good-parts-note3/</guid>
        
        <category>函数</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。

</description>
        <pubDate>Wed, 08 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/08/JavaScript-good-parts-note2/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/08/JavaScript-good-parts-note2/</guid>
        
        <category>继承</category>
        
        <category>对象</category>
        
        <category>原型</category>
        
        <category>Array</category>
        
        <category>正则</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
        <description>
记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。

</description>
        <pubDate>Tue, 07 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/06/07/JavaScript-good-parts-note1/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/07/JavaScript-good-parts-note1/</guid>
        
        <category>对象</category>
        
        <category>函数</category>
        
        <category>this</category>
        
        <category>闭包</category>
        
        <category>面向对象</category>
        
        <category>作用域</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
